# Generated by Django 3.1.7 on 2021-03-21 08:50

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TAnalysis',
            fields=[
                ('number', models.IntegerField(blank=True, primary_key=True, serialize=False, verbose_name='序号')),
                ('openid', models.CharField(blank=True, max_length=255, null=True, verbose_name='openid')),
                ('nickname', models.CharField(blank=True, max_length=255, null=True, verbose_name='昵称')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='姓名')),
                ('picture_trush', models.ImageField(blank=True, null=True, upload_to='picture_trush', verbose_name='垃圾照片')),
                ('machine_answer', models.CharField(blank=True, max_length=255, null=True, verbose_name='识别结果')),
                ('precisions', models.CharField(blank=True, max_length=255, null=True, verbose_name='识别精度')),
                ('data_time', models.CharField(blank=True, max_length=255, null=True, verbose_name='时间')),
            ],
            options={
                'verbose_name': '判断',
                'verbose_name_plural': '判断',
                'db_table': 't_analysis',
            },
        ),
        migrations.CreateModel(
            name='TCamera',
            fields=[
                ('number', models.IntegerField(blank=True, primary_key=True, serialize=False, verbose_name='序号')),
                ('openid', models.CharField(blank=True, max_length=255, null=True, verbose_name='openid')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='姓名')),
                ('nickname', models.CharField(blank=True, max_length=255, null=True, verbose_name='昵称')),
                ('face', models.ImageField(blank=True, null=True, upload_to='face', verbose_name='人脸')),
                ('picture_face', models.ImageField(blank=True, null=True, upload_to='picture_face', verbose_name='人脸照片')),
                ('picture_trush', models.ImageField(blank=True, null=True, upload_to='picture_trush', verbose_name='垃圾照片')),
                ('data_time', models.CharField(blank=True, max_length=255, null=True, verbose_name='时间')),
            ],
            options={
                'verbose_name': '摄像',
                'verbose_name_plural': '摄像',
                'db_table': 't_camera',
            },
        ),
        migrations.CreateModel(
            name='TUser',
            fields=[
                ('openid', models.CharField(max_length=255, primary_key=True, serialize=False, verbose_name='openid')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='姓名')),
                ('nickname', models.CharField(blank=True, max_length=255, null=True, verbose_name='昵称')),
                ('face', models.ImageField(blank=True, null=True, upload_to='face', verbose_name='人脸')),
                ('field_token', models.CharField(blank=True, db_column='token', max_length=255, null=True, verbose_name='field_token')),
                ('integral', models.IntegerField(blank=True, null=True, verbose_name='积分')),
            ],
            options={
                'verbose_name': '个人信息',
                'verbose_name_plural': '个人信息',
                'db_table': 't_user',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女')], default='female', max_length=6, verbose_name='性别')),
                ('image', models.ImageField(upload_to='head_portrait', verbose_name='头像')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '管理',
                'verbose_name_plural': '管理',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
